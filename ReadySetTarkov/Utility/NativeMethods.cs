using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows;

namespace ReadySetTarkov.Utility
{
    /// <summary>
    /// PInvoke area. See NativeMethods.txt for methods that are beingn generated by CsWin32.
    /// </summary>
    public class NativeMethods : INativeMethods
    {
        public NativeMethods(IKernel32 kernel32, IUser32 user32)
        {
            _kernel32 = kernel32;
            _user32 = user32;
        }
        [Flags]
        public enum MouseEventFlags : uint
        {
            LeftDown = 0x00000002,
            LeftUp = 0x00000004,
            RightDown = 0x00000008,
            RightUp = 0x00000010,
            Wheel = 0x00000800
        }

        public const int WsExTransparent = 0x00000020;
        public const int WsExToolWindow = 0x00000080;
        public const int WsExTopmost = 0x00000008;
        public const int WsExNoActivate = 0x08000000;

        private const int WsMinimize = 0x20000000;
        private const int WsMaximize = 0x1000000;
        public const int SwRestore = 9;
        public const int SwShow = 5;
        private const int Alt = 0xA4;
        private const int ExtendedKey = 0x1;
        private const int KeyUp = 0x2;
        private static DateTime _lastCheck;
        private static nint _tarkWindow;

        private static readonly Dictionary<IntPtr, string> WindowNameCache = new Dictionary<IntPtr, string>();

        private static readonly string[] WindowNames = { "EscapeFromTarkov" };
        private readonly IKernel32 _kernel32;
        private readonly IUser32 _user32;

        public bool IsTarkovInForeground() => _user32.GetForegroundWindow() == GetTarkovWindow();

        public WindowState GetTarkovWindowState()
        {
            var tWindow = GetTarkovWindow();
            var state = _user32.GetWindowLong(tWindow);
            if ((state & WsMaximize) == WsMaximize)
            {
                return WindowState.Maximized;
            }

            if ((state & WsMinimize) == WsMinimize)
            {
                return WindowState.Minimized;
            }

            return WindowState.Normal;
        }

        public nint GetTarkovWindow()
        {
            if (DateTime.Now - _lastCheck < new TimeSpan(0, 0, 5) && _tarkWindow == IntPtr.Zero)
            {
                return IntPtr.Zero;
            }

            if (_tarkWindow != IntPtr.Zero)
            {
                if (_user32.IsWindow(_tarkWindow))
                {
                    return _tarkWindow;
                }

                _tarkWindow = IntPtr.Zero;
                WindowNameCache.Clear();
            }

            _tarkWindow = _user32.FindWindow("UnityWndClass", "EscapeFromTarkov");

            if (_tarkWindow != IntPtr.Zero)
            {
                return _tarkWindow;
            }

            foreach (var windowName in WindowNames)
            {
                _tarkWindow = _user32.FindWindow("UnityWndClass", windowName);
                if (_tarkWindow == IntPtr.Zero)
                {
                    continue;
                }
                //if (Config.Instance.TarkovWindowName != windowName)
                //{
                //	Config.Instance.TarkovWindowName = windowName;
                //	Config.Save();
                //}
                break;
            }

            _lastCheck = DateTime.Now;
            return _tarkWindow;
        }

        public uint GetTarkovProcId()
        {
            if (_tarkWindow == IntPtr.Zero)
            {
                return 0;
            }

            return _user32.GetWindowThreadProcessId(_tarkWindow);
        }

        public void BringTarkovToForeground()
        {
            var tHandle = GetTarkovWindow();
            if (tHandle == IntPtr.Zero)
            {
                return;
            }

            ActivateWindow(tHandle);
            _user32.SetForegroundWindow(tHandle);
        }

        public void FlashTarkov() => _user32.FlashWindow(GetTarkovWindow(), false);

        //http://www.roelvanlisdonk.nl/?p=4032
        public void ActivateWindow(IntPtr mainWindowHandle)
        {
            //// Guard: check if window already has focus.
            //if (mainWindowHandle == GetForegroundWindow())
            //{
            //    return;
            //}

            //// Show window maximized.
            //ShowWindow(mainWindowHandle, GetTarkovWindowState() == WindowState.Minimized ? SwRestore : SwShow);

            //// Simulate an "ALT" key press.
            //keybd_event(Alt, 0x45, ExtendedKey | 0, 0);

            //// Simulate an "ALT" key release.
            //keybd_event(Alt, 0x45, ExtendedKey | KeyUp, 0);

            //// Show window in forground.
            //SetForegroundWindow(mainWindowHandle);
        }

        public string GetProcessFilename(uint processId)
        {
            var handle = _kernel32.OpenProcess(false, processId);
            return _kernel32.QueryFullProcessImageName(handle);
        }
    }
}
